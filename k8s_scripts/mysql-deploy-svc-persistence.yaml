apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mysql-data"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  selector:
    matchLabels:
      app: mysql

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: rootpassword
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: init-scripts
        configMap:
          name: mysql-init-scripts

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-scripts
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS course_db;
    CREATE DATABASE IF NOT EXISTS exam_db;
    CREATE DATABASE IF NOT EXISTS reservation_db;
    CREATE DATABASE IF NOT EXISTS result_db;

    CREATE USER IF NOT EXISTS 'user'@'%' IDENTIFIED BY 'password';
    GRANT ALL PRIVILEGES ON course_db.* TO 'user'@'%';
    GRANT ALL PRIVILEGES ON exam_db.* TO 'user'@'%';
    GRANT ALL PRIVILEGES ON reservation_db.* TO 'user'@'%';
    GRANT ALL PRIVILEGES ON result_db.* TO 'user'@'%';
    FLUSH PRIVILEGES;

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: mysql
  name: mysql
spec:
  ports:
  - name: 3306-3306
    port: 3306
    protocol: TCP
    targetPort: 3306
  selector:
    app: mysql
  type: ClusterIP